// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tag {
    id    Int    @id @default(autoincrement())
    name  String @unique
    posts Post[]
}

model Comment {
    id        Int       @id @default(autoincrement())
    content   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    post      Post      @relation(fields: [postId], references: [id])
    postId    Int
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    likes     Like[]
    replyTo   Comment?  @relation("CommentToComment", fields: [replyId], references: [id])
    replyId   Int?
    replies   Comment[] @relation("CommentToComment")

    // TODO: understand and fix this
    // https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations
    // reply     Comment?  @relation("CommentToComment", fields: [replyId], references: [id])
    // replyId   Int?
    // Comment   Comment[] @relation("CommentToComment")
    // @@unique([postId, authorId, content])

    @@index([postId])
}

model Like {
    id        Int     @id @default(autoincrement())
    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    @@unique([commentId, userId])
}

model User {
    id            String    @id @default(cuid())
    coverImage    String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    // follows       User[]    @relation("UserFollows", references: [id])
    // followers     User[]    @relation("UserFollows", references: [id])
    Like          Like[]

    bio       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // maybe add saved post later
    @@fulltext([name])
}

enum Category {
    Technology
    HealthWellness
    PersonalFinance
    FoodCooking
    Travel
    FashionBeauty
    Lifestyle
    ParentingFamily
    BusinessEntrepreneurship
    DIYCrafts
    EducationLearning
    EntertainmentPopCulture
    SportsFitness
    PoliticsSocialIssues
    Gaming
    HomeGarden
    None
}

// blog post model
// store content as markdown with image links to s3
model Post {
    id        Int       @id @default(autoincrement())
    title     String
    subtitle  String?
    content   String    @db.Text //64 KB limit
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    published Boolean   @default(false)
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    tags      Tag[]
    category  Category
    comments  Comment[]
    // TODO should this be unique
    // @@unique([title, authorId])

    // @@index([title])
    @@fulltext([title, content])
    @@map("BlogPost")
}

generator custom_generator {
    provider = "prisma-generator-fake-data"
    output   = "../src/utils/data.ts"
}
