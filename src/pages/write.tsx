// import { MDXEditor, headingsPlugin } from "~mdxeditor/editor";
import Head from "next/head";
import { signIn, useSession } from "next-auth/react";

import { useEditorStore, useProfileStore } from "~/utils/stores";
import dynamic from "next/dynamic";
import { ComponentType } from "react";

const Editor = dynamic(() => import("~/components/ui/Editor"), { ssr: false });

import { useRouter } from "next/router";
import { SearchIcon } from "lucide-react";
import { Logo } from "~/components/svgs/logo";
// import Header from "./write";
import Link from "next/link";
import { IoIosNotificationsOutline as BellClose } from "react-icons/io";
import { ProfileDD } from "~/components/ui/ProfileDD";
import { ProfilePic } from "~/components/ui/profile-pic";
import { IoIosNotificationsOutline } from "react-icons/io";
// import Editor from "~/components/ui/Editor";
// store.js
import create from "zustand";
import { useStore } from "zustand";

export default function Home() {
  // if not logged in, redirect to login
  const { data: sessionData } = useSession();
  const router = useRouter();

  // const increase = useStore(useBearStore, (state) => state.increase);
  // if (!sessionData || !sessionData.user) {
  //   // TODO  check if this  works
  //   use(async () => signIn());
  // }
  // useEffect(() => {
  //   if (!sessionData || !sessionData.user) {
  //     signIn().catch(console.error);
  //     // router.push("/login").catch(console.error);
  //   }
  // }, [sessionData]);

  // redirect to login
  // useEffect(() => {
  //   if (!sessionData || !sessionData.user) {
  //     router.push("/login").catch(console.error);
  //   }
  // }, [sessionData]);

  return (
    <div>
      <Head>
        <title> Create an article</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>

      <Editor />
    </div>
  );
}
import { api } from "~/utils/api";
import { Session } from "next-auth";
import { Undefinable } from "~/utils/types";
function Header() {
  const { data: sessionData } = useSession();

  const { updating } = useStore(useProfileStore);

  const { html } = useStore(useEditorStore);
  // send html and content to trpc backend on publish button
  const { data, mutate: createNewPost } = api.post.createPost.useMutation();

  if (!sessionData || !sessionData.user) {
    return null;
  }

  return (
    <>
      <Head>
        <title> Create an article</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <nav className="container flex w-full items-baseline justify-between p-4">
        <div className="flex  items-center gap-3">
          <Link href="/" className="h-7  w-11 overflow-hidden rounded-full">
            <Logo />
            {/* search input */}
          </Link>
          <h1 className=" ">Draft by {sessionData?.user?.name}</h1>
          {/* saved or not  */}

          {updating ? (
            <span className="text-xs text-gray-500">Saving...</span>
          ) : (
            <span className="text-xs text-gray-500">Saved</span>
          )}
        </div>

        <div className="flex items-center gap-5 pt-1 text-lg">
          <button
            onClick={async () => {
              // const newPost = await api.post.createPost.useMutation({
              // });
              const dom = new DOMParser().parseFromString(html, "text/html");
              const title = dom.querySelector("h1")?.textContent;
              // remove h1 from the dom
              dom.querySelector("h1")?.remove();

              if (!title) {
                console.error("no title");
                return;
              }
              const newPost = createNewPost({
                title,
                category: "BusinessEntrepreneurship",
                content: dom.body.innerHTML,
                tags: ["test"],
                published: true,
              });

              console.log("sent", title);
            }}
            className="rounded-full  bg-green-600 px-3 py-1 text-white transition-all duration-200 hover:bg-gray-600 hover:text-white"
          >
            Publish
          </button>

          <BellClose className="h-7 w-7" />
          <ProfileDD
            user={sessionData?.user}
            before={
              <div className=" w-45 flex h-12 items-center justify-center gap-2 ">
                <ProfilePic author={sessionData?.user} className="h-12 w-12" />
                <Link href="/profile" className="flex flex-col">
                  <span className=" ">{sessionData?.user?.name}</span>
                  <span className="hover:underlin text-gray-600">
                    ~{sessionData?.user?.name}
                  </span>
                </Link>
              </div>
            }
          />
        </div>
      </nav>
    </>
  );
}

function Layout({ children }: { children: ComponentType }) {
  // I want to send the trpc from here
  return (
    <>
      <Header />
      {children}
    </>
  );
}

Home.Layout = Layout;

import { CategorySchema } from "~/utils/types";

import { Button } from "~/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form";
import { Input } from "~/components/ui/input";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

function UploadPage({ user }: { user: Undefinable<Session["user"]> }) {
  const { html } = useStore(useEditorStore);

  const { data, mutate: createNewPost } = api.post.createPost.useMutation();
  // const user = sessionData.user;
  console.log("user", user);
  // console.log("userPosts", userPosts);
  console.log("data", data);
  console.log("html", html);
  const formSchema = z.object({
    // name: z.string().min(6),
    // category: z.string().min(1),
    title: z.string().min(6),
    category: CategorySchema,
    content: z.string().min(6),
    tags: z.array(z.string()),
    published: z.boolean(),
  });

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  });

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
