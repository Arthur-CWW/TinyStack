import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";

export default function Home() {
  const hello = api.post.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header
        className="bg-orange flex w-full items-baseline justify-between   p-4
      "
      >
        <div>
          <Logo />
        </div>
        <div className="flex items-baseline gap-4 pt-1">
          <Link href="story">Our Story</Link>
          <Link href="membership"> Membership</Link>
          <Link href="write">Membership</Link>
          <Link href="auth">Sign in</Link>
          {/* pill button */}
          <button className="rounded-full bg-black p-2 font-semibold text-white">
            {/* todo signup flow */}
            <Link href="signup-flow">Get started</Link>
          </button>
        </div>
      </header>

      <main className="  bg-orange flex justify-between  border-y-[1px] border-black px-3">
        <div className="container right-0 flex max-w-md flex-col items-center justify-center gap-12 px-4 py-24">
          <h1 className="text-5xl font-extrabold tracking-tight text-black sm:text-[5rem]">
            Stay curious
          </h1>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-black">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
        <div className="relative w-[585px]">
          <SplashBackground className="absolute bottom-0 right-0 " />
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
